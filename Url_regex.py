# import re
# def valid_url(url):
#     pattern = r'^data:image\/(png|jpeg|jpg|gif|bmp|webp);base64,[A-Za-z0-9+/=]+$'
#     match = re.match(pattern, url)
#     return match is None

# test_url = (
#     'data: image/png
#             base64, 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 == )

# if valid_url(test_url):
#     print("The URL is valid.")
# else:
#     print("The URL is not valid.")


import re


def is_valid_url(url):
    pattern = re.match(
        r"(https|http)://([\w\.]+/)([\w/)-]+)\.(png|jpeg|jpg|svg|webp)([\w\\=&-_]+)?", url,
        re.IGNORECASE
    )
    if pattern:
        print("Valid URL")
    else:
        print("Invalid URL")


is_valid_url("https://images.cara.app/production/posts/64c646d0-9b4b-46e2-944b-540da1255eed/denismedri-hx1pKN0aO5vawemYptQdc-2d6f69fe-5a60-4a0d-b3d7-8970a92ada26.jpg?width=384&quality=100")
